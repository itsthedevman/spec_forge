# Users API paths
# Contains all user-related endpoint specifications

/users:
  get:
    tags: [ "Users" ]
    summary: "List all users"
    description: "Returns a paginated list of all users that the authenticated user has access to view"
    parameters:
    - name: limit
      in: query
      description: "Maximum number of results to return"
      schema:
        type: integer
        default: 20
        minimum: 1
        maximum: 100
    - name: offset
      in: query
      description: "Number of results to skip"
      schema:
        type: integer
        default: 0
    - name: role
      in: query
      description: "Filter users by role"
      schema:
        type: string
        enum: [ "admin", "user", "guest" ]
    responses:
      "200":
        description: "List of users"
        content:
          application/json:
            schema:
              type: object
              properties:
                total:
                  type: integer
                  description: "Total number of users matching the query"
                users:
                  type: array
                  items:
                    $ref: "#/components/schemas/User"
      "401":
        description: "Unauthorized - Authentication required"
      "403":
        description: "Forbidden - User does not have permission to list users"
    security:
    - bearerAuth: []

  post:
    tags: [ "Users" ]
    summary: "Create a new user"
    description: "Creates a new user account with the provided information"
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [ "name", "email", "password" ]
            properties:
              name:
                type: string
                example: "John Doe"
              email:
                type: string
                format: email
                example: "john@example.com"
              password:
                type: string
                format: password
                minLength: 8
                example: "password123"
              role:
                type: string
                enum: [ "user", "admin" ]
                default: "user"
    responses:
      "201":
        description: "User created successfully"
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/User"
      "400":
        description: "Bad request - Invalid user data"
      "409":
        description: "Conflict - Email already in use"
    security:
    - bearerAuth: []

/users/{id}:
  parameters:
  - name: id
    in: path
    description: "Unique identifier of the user"
    required: true
    schema:
      type: integer

  get:
    tags: [ "Users" ]
    summary: "Get user details"
    description: "Returns detailed information about a specific user"
    responses:
      "200":
        description: "User details"
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/User"
      "404":
        description: "User not found"
    security:
    - bearerAuth: []

  patch:
    tags: [ "Users" ]
    summary: "Update user"
    description: "Updates a user's information. Only provided fields will be modified."
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
                format: email
              role:
                type: string
                enum: [ "user", "admin" ]
    responses:
      "200":
        description: "User updated successfully"
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/User"
      "400":
        description: "Bad request - Invalid data"
      "404":
        description: "User not found"
    security:
    - bearerAuth: []

  delete:
    tags: [ "Users" ]
    summary: "Delete user"
    description: "Permanently deletes a user and all associated data"
    responses:
      "204":
        description: "User deleted successfully"
      "404":
        description: "User not found"
      "403":
        description: "Forbidden - User does not have permission to delete this user"
    security:
    - bearerAuth: []
