#
# 10_advanced_queries.yml
#
# This file demonstrates advanced query capabilities in SpecForge.
#
# ADVANCED QUERIES OVERVIEW:
# -----------------------
# Modern APIs need robust query capabilities to allow clients to:
# - Filter data by various criteria
# - Sort results in different orders
# - Paginate through large result sets
# - Combine multiple query parameters for complex filtering
#
# This test file covers all these capabilities and shows how
# to test them thoroughly using SpecForge.
#

# Global variables for test data and authentication
global:
  variables:
    admin_credentials:
      email: "query-admin@example.com"
      password: "adminpass123"
    author1_credentials:
      email: "author1@example.com"
      password: "author1pass"
    author2_credentials:
      email: "author2@example.com"
      password: "author2pass"
  # Add database cleanup to prevent test interference
  callbacks:
  - before_file: prepare_database_state
    after_file: cleanup_database_state

# SECTION 0: SETUP TEST USERS AND DATA
# Create users and posts needed for query testing
setup_users:
  path: "/users"
  method: post
  expectations:
  - name: "Create admin user"
    body:
      name: "Query Test Admin"
      email: global.variables.admin_credentials.email
      password: global.variables.admin_credentials.password
      role: "admin"
    store_as: admin_user
    expect:
      status: 201

  - name: "Create first author"
    body:
      name: "Author One"
      email: global.variables.author1_credentials.email
      password: global.variables.author1_credentials.password
      role: "user"
    store_as: author1
    expect:
      status: 201

  - name: "Create second author"
    body:
      name: "Author Two"
      email: global.variables.author2_credentials.email
      password: global.variables.author2_credentials.password
      role: "user"
    store_as: author2
    expect:
      status: 201

# Authenticate users to get tokens
authenticate_users:
  path: "/auth/login"
  method: post
  expectations:
  - name: "Authenticate admin user"
    body: global.variables.admin_credentials
    store_as: admin_auth
    expect:
      status: 200
      json:
        token: kind_of.string

  - name: "Authenticate first author"
    body: global.variables.author1_credentials
    store_as: author1_auth
    expect:
      status: 200
      json:
        token: kind_of.string

  - name: "Authenticate second author"
    body: global.variables.author2_credentials
    store_as: author2_auth
    expect:
      status: 200
      json:
        token: kind_of.string

# Create test posts with different properties for query testing
create_test_posts:
  path: "/posts"
  method: post
  variables:
    admin_token:
      transform.join:
      - "Bearer "
      - store.admin_auth.body.token
    author1_token:
      transform.join:
      - "Bearer "
      - store.author1_auth.body.token
    author2_token:
      transform.join:
      - "Bearer "
      - store.author2_auth.body.token

  expectations:
  # Create posts for first author - all published
  - name: "Create first author's post 1 (oldest)"
    headers:
      Authorization: variables.author1_token
    body:
      title: "Author One's First Post"
      content: "This is the first post from Author One."
      published: true
    expect:
      status: 201

  - name: "Create first author's post 2 (middle)"
    headers:
      Authorization: variables.author1_token
    body:
      title: "Author One's Second Post"
      content: "This is the second post from Author One."
      published: true
    expect:
      status: 201

  - name: "Create first author's post 3 (newest)"
    headers:
      Authorization: variables.author1_token
    body:
      title: "Author One's Third Post"
      content: "This is the third post from Author One."
      published: true
    expect:
      status: 201

  # Create posts for second author - mix of published and drafts
  - name: "Create second author's published post"
    headers:
      Authorization: variables.author2_token
    body:
      title: "Author Two's Published Post"
      content: "This is a published post from Author Two."
      published: true
    expect:
      status: 201

  - name: "Create second author's draft post"
    headers:
      Authorization: variables.author2_token
    body:
      title: "Author Two's Draft Post"
      content: "This is a draft post from Author Two."
      published: false
    expect:
      status: 201

  # Create admin posts
  - name: "Create admin's published post"
    headers:
      Authorization: variables.admin_token
    body:
      title: "Admin's Published Post"
      content: "This is a published post from Admin."
      published: true
    expect:
      status: 201

  - name: "Create admin's draft post"
    headers:
      Authorization: variables.admin_token
    body:
      title: "Admin's Draft Post"
      content: "This is a draft post from Admin."
      published: false
    expect:
      status: 201

# SECTION 1: BASIC FILTERING
# Testing filtering by various criteria
basic_filtering:
  path: "/posts"
  variables:
    admin_token:
      transform.join:
      - "Bearer "
      - store.admin_auth.body.token
    author1_id: store.author1.body.user.id
    author2_id: store.author2.body.user.id
  expectations:
  # Filter by user_id to get posts by a specific author
  - name: "Filter posts by first author"
    query:
      user_id: variables.author1_id
    headers:
      Authorization: variables.admin_token
    expect:
      status: 200
      json:
        # Expect exactly 3 posts from first author
        posts:
          matcher.have_size: 3
        total: 3

  - name: "Filter posts by second author"
    query:
      user_id: variables.author2_id
    headers:
      Authorization: variables.admin_token
    expect:
      status: 200
      json:
        # Expect 2 posts from second author (1 published, 1 draft) when admin is viewing
        posts:
          matcher.have_size: 2
        total: 2

  # Test published filter (implicit when not authenticated or non-admin)
  - name: "View only published posts (unauthenticated)"
    expect:
      status: 200
      json:
        # Should only show published posts (5 total)
        posts:
          matcher.all:
            matcher.include:
              published: true

  # Test filtering by title substring (if implemented)
  - name: "Filter posts by title substring"
    query:
      title: "One"
    headers:
      Authorization: variables.admin_token
    expect:
      status: 200
      json:
        posts:
          matcher.all:
            matcher.include:
              title:
                matcher.include: "Author One"

# SECTION 2: SORTING
# Testing sorting by different fields and directions
sorting:
  path: "/posts"
  variables:
    admin_token:
      transform.join:
      - "Bearer "
      - store.admin_auth.body.token
  expectations:
  # Sort by creation date (ascending)
  - name: "Sort posts by created_at ascending"
    query:
      sort: "created_at"
      # Direction is ascending by default
    headers:
      Authorization: variables.admin_token
    expect:
      status: 200
      json:
        posts:
          # First post should be the oldest
          matcher.include:
            matcher.include:
              title: "Author One's First Post"

  # Sort by creation date (descending)
  - name: "Sort posts by created_at descending"
    query:
      sort: "created_at"
      direction: "desc"
    headers:
      Authorization: variables.admin_token
    expect:
      status: 200
      json:
        posts:
          # First post should be the newest
          matcher.include:
            matcher.include:
              title: "Admin's Draft Post"

  # Sort by title (ascending)
  - name: "Sort posts by title ascending"
    query:
      sort: "title"
    headers:
      Authorization: variables.admin_token
    expect:
      status: 200
      json:
        posts:
          # First post should be "Admin's Draft Post" alphabetically
          matcher.include:
            matcher.include:
              title: "Admin's Draft Post"

  # Sort by title (descending)
  - name: "Sort posts by title descending"
    query:
      sort: "title"
      direction: "desc"
    headers:
      Authorization: variables.admin_token
    expect:
      status: 200
      json:
        posts:
          # First post should be the alphabetically last title
          matcher.include:
            matcher.include:
              title:
                matcher.start_with: "Author"

# SECTION 3: PAGINATION
# Testing pagination with limit and offset parameters
pagination:
  path: "/posts"
  variables:
    admin_token:
      transform.join:
      - "Bearer "
      - store.admin_auth.body.token
  expectations:
  # Test small page size
  - name: "Paginate with small page size (2 posts per page)"
    query:
      limit: 2
    headers:
      Authorization: variables.admin_token
    expect:
      status: 200
      json:
        # Should return exactly 2 posts
        posts:
          matcher.have_size: 2
        # But total should still reflect all posts
        total:
          be.greater_than: 2

  # Test offset parameter
  - name: "Paginate with offset (skip first 2 posts)"
    query:
      limit: 2
      offset: 2
    headers:
      Authorization: variables.admin_token
    expect:
      status: 200
      json:
        # Should return exactly 2 posts
        posts:
          matcher.have_size: 2
        # But total should still reflect all posts
        total:
          be.greater_than: 2

  # Test last page
  - name: "Get last page of posts"
    query:
      limit: 2
      offset: 5 # With 7 total posts, this should give last 2 posts
    headers:
      Authorization: variables.admin_token
    expect:
      status: 200
      json:
        # Last page should have exactly 2 posts
        posts:
          matcher.have_size: 2
        # Total should reflect all posts
        total: 7

  # Test beyond last page
  - name: "Attempt to get page beyond available data"
    query:
      limit: 2
      offset: 10 # Beyond available data
    headers:
      Authorization: variables.admin_token
    expect:
      status: 200
      json:
        # Should return empty array, not error
        posts:
          matcher.have_size: 0
        # Total should reflect all posts
        total: 7

# SECTION 4: COMPLEX QUERIES
# Testing combined filtering, sorting, and pagination
complex_queries:
  path: "/posts"
  variables:
    admin_token:
      transform.join:
      - "Bearer "
      - store.admin_auth.body.token
    author1_id: store.author1.body.user.id
  expectations:
  # Filter by author and sort by title
  - name: "Filter by author and sort by title"
    query:
      user_id: variables.author1_id
      sort: "title"
    headers:
      Authorization: variables.admin_token
    expect:
      status: 200
      json:
        # Should return 3 posts, alphabetically sorted
        posts:
          matcher.have_size: 3
        total: 3

  # Filter, sort, and paginate
  - name: "Filter, sort, and paginate"
    query:
      user_id: variables.author1_id
      sort: "created_at"
      direction: "desc"
      limit: 2
    headers:
      Authorization: variables.admin_token
    expect:
      status: 200
      json:
        # Should return exactly 2 posts
        posts:
          matcher.and:
          - matcher.have_size: 2
          # First post should be newest from author 1
          - matcher.include:
              matcher.include:
                title: "Author One's Third Post"
        # Total should reflect filtered count (3)
        total: 3

  # Filter by published status, sort, and paginate
  - name: "Filter by published status, sort, and paginate"
    query:
      published: true
      sort: "title"
      limit: 3
      offset: 1
    headers:
      Authorization: variables.admin_token
    expect:
      status: 200
      json:
        # Should return exactly 3 posts
        posts:
          matcher.and:
          - matcher.have_size: 3
          - matcher.all:
              matcher.include:
                published: true
        # Total should reflect filtered count (5 published)
        total: 5

  # Complex search with multiple filters
  - name: "Complex search with multiple filters"
    query:
      user_id: variables.author1_id
      title: "Second"
      sort: "created_at"
    headers:
      Authorization: variables.admin_token
    expect:
      status: 200
      json:
        # Should return 1 post matching both filters
        posts:
          matcher.have_size: 1
          matcher.include:
            matcher.include:
              title:
                matcher.include: "Second"
              author: "Author One"
        total: 1

# SECTION 5: PARAMETER VALIDATION
# Testing error handling for invalid query parameters
parameter_validation:
  path: "/posts"
  variables:
    admin_token:
      transform.join:
      - "Bearer "
      - store.admin_auth.body.token
  expectations:
  # Test invalid limit parameter
  - name: "Invalid limit parameter"
    query:
      limit: "not-a-number"
    headers:
      Authorization: variables.admin_token
    expect:
      status: 400
      json:
        error: kind_of.string

  # Test invalid sort column
  - name: "Invalid sort column"
    query:
      sort: "invalid_column"
    headers:
      Authorization: variables.admin_token
    expect:
      status: 400
      json:
        error: kind_of.string

  # Test invalid direction parameter
  - name: "Invalid sort direction"
    query:
      sort: "created_at"
      direction: "invalid"
    headers:
      Authorization: variables.admin_token
    expect:
      # Should either ignore invalid direction or return error
      status: 400
