# SECTION 1: BASIC VARIABLE USAGE
basic_variables:
  path: /data/types
  variables:
    # Simple variable definitions
    expected_status: 200
    string_value: "Hello, world!"
    array_length: 5
  expectations:
  - name: "Using basic variables"
    expect:
      status: variables.expected_status
      json:
        string_value: variables.string_value
        array_simple:
          matcher.have_size: variables.array_length

# SECTION 2: VARIABLE SCOPING AND OVERRIDES
variable_scoping:
  path: /status # Default path for the spec
  variables:
    # Spec level variables
    expected_status: 200
  expectations:
  - name: "Using spec-level variables"
    # No override here - use spec-level variables
    expect:
      status: variables.expected_status # Should be 200

  - name: "Overriding variables at expectation level"
    path: /nonexistent-path # This should definitely 404
    variables:
      # Override the spec-level expected_status
      expected_status: 404
    expect:
      status: variables.expected_status # Now overridden to 404

# SECTION 3: VARIABLE CHAINING
variable_chaining:
  path: /users
  variables:
    # Create a user to reference
    new_user: factories.user
    # Object containing multiple values
    response_checks:
      min_count: 1
      user_name: variables.new_user.name
      max_users: 1000 # Increased to handle large number of users
  expectations:
  - name: "Accessing nested properties through chaining"
    expect:
      status: 200
      json:
        total:
          be.between:
          - variables.response_checks.min_count
          - variables.response_checks.max_users
        users:
          matcher.include:
            matcher.include:
              name: variables.response_checks.user_name

# SECTION 4: VARIABLES IN REQUEST BUILDING
request_variables:
  variables:
    # Variables for constructing the request
    user: factories.user
    query_limit: 10
    new_name: faker.name.name
  expectations:
  - name: "Using variables in path parameters"
    path: /users/{id}
    query:
      id: variables.user.id
    expect:
      status: 200
      json:
        user:
          id: variables.user.id
          name: variables.user.name

  - name: "Using variables in query parameters"
    path: /users
    query:
      limit: variables.query_limit
    expect:
      status: 200
      json:
        users: kind_of.array

  - name: "Using variables in request body"
    path: /users/{id}
    method: patch
    query:
      id: variables.user.id
    body:
      name: variables.new_name
    expect:
      status: 200
      json:
        user:
          name: variables.new_name

# SECTION 5: COMPUTED VARIABLES
computed_variables:
  variables:
    # Basic values
    first_name: faker.name.first_name
    last_name: faker.name.last_name
    # Computed values based on other variables
    full_name:
      transform.join:
      - variables.first_name
      - " "
      - variables.last_name
    # Super unique email to prevent collisions
    random_string:
      faker.alphanumeric.alpha:
        number: 10
    email:
      transform.join:
      - variables.first_name
      - "."
      - variables.last_name
      - "."
      - variables.random_string
      - "@example.test"
  expectations:
  - name: "Using computed variables from transforms"
    path: /users
    method: post
    body:
      name: variables.full_name
      email: variables.email
    expect:
      status: 201
      json:
        user:
          name: variables.full_name
          email: variables.email
