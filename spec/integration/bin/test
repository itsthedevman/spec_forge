#!/usr/bin/env bash

# Exit the script if any command fails
set -e

# Configuration
RAILS_PID_FILE="tmp/pids/server.pid"
TIMEOUT=${TIMEOUT:-30}
PORT=${PORT:-3000}
SPEC_FORGE_ARGS="$@"
CONTINUE_RUNNING_SERVER="false"

# Check if Rails server is already running elsewhere
check_running_server() {
    # Check for any running Rails server processes
    local other_servers=$(ps aux | grep -v grep | grep -E "[r]ails\ss|[p]uma" | wc -l)

    if [ $other_servers -gt 0 ]; then
        echo "⚠️  WARNING: Detected $other_servers running Rails server(s)!"
        echo "This might cause your tests to connect to the wrong server."
        echo "Please stop all other Rails servers before running tests."
        echo ""
        echo "Running processes:"
        ps aux | grep -v grep | grep -E "[r]ails\ss|[p]uma"
        echo ""
        echo "Options:"
        echo "1) Continue anyway"
        echo "2) Kill running servers and continue"
        echo "3) Abort"
        echo ""
        read -p "Enter your choice (1-3): " choice

        case "$choice" in
        1)
            echo "Continuing with tests..."
            CONTINUE_RUNNING_SERVER="true"
            ;;
        2)
            echo "Killing running servers..."
            pkill -9 -f "puma" || true
            sleep 1
            ;;
        *)
            echo "Aborting tests."
            exit 0
            ;;
        esac
    fi
}

# Function to clean up resources
cleanup() {
    echo ""
    echo "Cleaning up resources..."

    # Nuclear option - kill all puma processes for this directory
    echo "Stopping any Rails servers..."
    pkill -9 -f "puma .* \[integration\]" || true

    # Clean up the PID file if it exists (just for good measure)
    if [ -f "$RAILS_PID_FILE" ]; then
        rm -f "$RAILS_PID_FILE" 2>/dev/null || true
    fi

    echo "Cleanup complete."
}

# We need separate handlers for different signals
exit_handler() {
    if [ "$CONTINUE_RUNNING_SERVER" = "false" ]; then
        cleanup
    fi

    # Normal exit
}

interrupt_handler() {
    if [ "$CONTINUE_RUNNING_SERVER" = "false" ]; then
        cleanup
    fi

    echo "Test run interrupted by user."

    # Remove all traps to prevent cascading
    trap - EXIT INT TERM

    exit 1
}

# Make sure we're in the Rails root directory
if [ ! -f "./config/application.rb" ]; then
    echo "Error: Must be run from the Rails application root directory."
    exit 1
fi

# Check for already running servers
check_running_server

# Set up different trap handlers
trap exit_handler EXIT
trap interrupt_handler INT TERM

# Start Rails server
echo "Starting Rails server..."

# Explicitly set binding to 0.0.0.0 to work in CI
RAILS_ENV="test" bin/rails server -p $PORT -b 0.0.0.0 -d

if [ $? -ne 0 ]; then
    echo "Error: Failed to start Rails server."
    exit 1
fi

# Give the server a moment to start up
echo "Waiting for Rails server to start..."

sleep_interval=0.25
start_time=$(date +%s)

while [ $(($(date +%s) - start_time)) -lt $TIMEOUT ]; do
    elapsed=$(($(date +%s) - start_time))

    if curl -s http://localhost:$PORT/health >/dev/null 2>&1 || curl -s http://localhost:$PORT >/dev/null 2>&1; then
        echo "Rails server started successfully after $elapsed seconds."
        break
    fi

    # Print server logs to help debug in CI
    if [ $elapsed -eq 10 ] || [ $elapsed -eq 20 ]; then
        echo "Server still not responding after $elapsed seconds. Checking logs:"
        cat log/development.log | tail -n 20
    fi

    if [ $elapsed -ge $TIMEOUT ]; then
        echo "Error: Rails server failed to start within $TIMEOUT seconds."
        echo "Last 50 lines of the server log:"
        cat log/development.log | tail -n 50
        exit 1
    fi

    echo "Waiting... ($elapsed/$TIMEOUT)"
    sleep $sleep_interval
done

# Run SpecForge tests
echo "Running SpecForge tests..."
echo ""

if [ -z "$SPEC_FORGE_ARGS" ]; then
    bundle exec spec_forge --trace
else
    bundle exec spec_forge $SPEC_FORGE_ARGS --trace
fi

SPEC_FORGE_EXIT_CODE=$?
echo ""
echo "SpecForge tests completed with exit code: $SPEC_FORGE_EXIT_CODE"

exit $SPEC_FORGE_EXIT_CODE
