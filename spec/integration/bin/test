#!/usr/bin/env bash

# Exit the script if any command fails
set -e

# Configuration
RAILS_PID_FILE="tmp/pids/server.pid"
TIMEOUT=${TIMEOUT:-30}
PORT=${PORT:-3000}
SPEC_FORGE_ARGS="$@"

# Function to clean up resources
cleanup() {
    echo ""
    echo "Cleaning up resources..."

    # Check if Rails server is running and stop it
    if [ -f "$RAILS_PID_FILE" ]; then
        echo "Stopping Rails server..."
        kill -INT $(cat "$RAILS_PID_FILE") 2>/dev/null || true
        rm -f "$RAILS_PID_FILE" 2>/dev/null || true
        echo "Rails server stopped."
    fi

    echo "Cleanup complete."
}

# Set up cleanup on script exit
trap cleanup EXIT INT TERM

# Make sure we're in the Rails root directory
if [ ! -f "./config/application.rb" ]; then
    echo "Error: Must be run from the Rails application root directory."
    exit 1
fi

# Start Rails server
echo "Starting Rails server..."

# Explicitly set binding to 0.0.0.0 to work in CI
bin/rails server -p $PORT -b 0.0.0.0 -d

if [ $? -ne 0 ]; then
    echo "Error: Failed to start Rails server."
    exit 1
fi

# Give the server a moment to start up
echo "Waiting for Rails server to start..."

sleep_interval=0.25
start_time=$(date +%s)

while [ $(($(date +%s) - start_time)) -lt $TIMEOUT ]; do
    elapsed=$(($(date +%s) - start_time))

    if curl -s http://localhost:$PORT/health >/dev/null 2>&1 || curl -s http://localhost:$PORT >/dev/null 2>&1; then
        echo "Rails server started successfully after $elapsed seconds."
        break
    fi

    # Print server logs to help debug in CI
    if [ $elapsed -eq 10 ] || [ $elapsed -eq 20 ]; then
        echo "Server still not responding after $elapsed seconds. Checking logs:"
        cat log/development.log | tail -n 20
    fi

    if [ $elapsed -ge $TIMEOUT ]; then
        echo "Error: Rails server failed to start within $TIMEOUT seconds."
        echo "Last 50 lines of the server log:"
        cat log/development.log | tail -n 50
        exit 1
    fi

    echo "Waiting... ($elapsed/$TIMEOUT)"
    sleep $sleep_interval
done

# Run SpecForge tests
echo "Running SpecForge tests..."
echo ""

if [ -z "$SPEC_FORGE_ARGS" ]; then
    bundle exec spec_forge
else
    bundle exec spec_forge $SPEC_FORGE_ARGS
fi

SPEC_FORGE_EXIT_CODE=$?
echo ""
echo "SpecForge tests completed with exit code: $SPEC_FORGE_EXIT_CODE"

exit $SPEC_FORGE_EXIT_CODE
